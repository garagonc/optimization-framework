# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MQTT(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, topic: str=None, qos: int=None):  # noqa: E501
        """MQTT - a model defined in Swagger

        :param host: The host of this MQTT.  # noqa: E501
        :type host: str
        :param topic: The topic of this MQTT.  # noqa: E501
        :type topic: str
        :param qos: The qos of this MQTT.  # noqa: E501
        :type qos: int
        """
        self.swagger_types = {
            'host': str,
            'topic': str,
            'qos': int
        }

        self.attribute_map = {
            'host': 'host',
            'topic': 'topic',
            'qos': 'qos'
        }

        self._host = host
        self._topic = topic
        self._qos = qos

    @classmethod
    def from_dict(cls, dikt) -> 'MQTT':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MQTT of this MQTT.  # noqa: E501
        :rtype: MQTT
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self) -> str:
        """Gets the host of this MQTT.


        :return: The host of this MQTT.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this MQTT.


        :param host: The host of this MQTT.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def topic(self) -> str:
        """Gets the topic of this MQTT.


        :return: The topic of this MQTT.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic: str):
        """Sets the topic of this MQTT.


        :param topic: The topic of this MQTT.
        :type topic: str
        """

        self._topic = topic

    @property
    def qos(self) -> int:
        """Gets the qos of this MQTT.


        :return: The qos of this MQTT.
        :rtype: int
        """
        return self._qos

    @qos.setter
    def qos(self, qos: int):
        """Sets the qos of this MQTT.


        :param qos: The qos of this MQTT.
        :type qos: int
        """
        if qos is not None and qos > 2:  # noqa: E501
            raise ValueError("Invalid value for `qos`, must be a value less than or equal to `2`")  # noqa: E501
        if qos is not None and qos < 0:  # noqa: E501
            raise ValueError("Invalid value for `qos`, must be a value greater than or equal to `0`")  # noqa: E501

        self._qos = qos
