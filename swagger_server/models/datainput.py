# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mqtt import MQTT  # noqa: F401,E501
from swagger_server import util


class Datainput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, model_name: str=None, mqtt: MQTT=None):  # noqa: E501
        """Datainput - a model defined in Swagger

        :param name: The name of this Datainput.  # noqa: E501
        :type name: str
        :param model_name: The model_name of this Datainput.  # noqa: E501
        :type model_name: str
        :param mqtt: The mqtt of this Datainput.  # noqa: E501
        :type mqtt: MQTT
        """
        self.swagger_types = {
            'name': str,
            'model_name': str,
            'mqtt': MQTT
        }

        self.attribute_map = {
            'name': 'name',
            'model_name': 'model_name',
            'mqtt': 'mqtt'
        }

        self._name = name
        self._model_name = model_name
        self._mqtt = mqtt

    @classmethod
    def from_dict(cls, dikt) -> 'Datainput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Datainput of this Datainput.  # noqa: E501
        :rtype: Datainput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Datainput.


        :return: The name of this Datainput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Datainput.


        :param name: The name of this Datainput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def model_name(self) -> str:
        """Gets the model_name of this Datainput.


        :return: The model_name of this Datainput.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this Datainput.


        :param model_name: The model_name of this Datainput.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def mqtt(self) -> MQTT:
        """Gets the mqtt of this Datainput.


        :return: The mqtt of this Datainput.
        :rtype: MQTT
        """
        return self._mqtt

    @mqtt.setter
    def mqtt(self, mqtt: MQTT):
        """Sets the mqtt of this Datainput.


        :param mqtt: The mqtt of this Datainput.
        :type mqtt: MQTT
        """

        self._mqtt = mqtt
