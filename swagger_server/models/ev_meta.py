# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EvMeta(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, unit_consumption_assumption: float=None, unit_drop_penalty: float=None):  # noqa: E501
        """EvMeta - a model defined in Swagger

        :param unit_consumption_assumption: The unit_consumption_assumption of this EvMeta.  # noqa: E501
        :type unit_consumption_assumption: float
        :param unit_drop_penalty: The unit_drop_penalty of this EvMeta.  # noqa: E501
        :type unit_drop_penalty: float
        """
        self.swagger_types = {
            'unit_consumption_assumption': float,
            'unit_drop_penalty': float
        }

        self.attribute_map = {
            'unit_consumption_assumption': 'Unit_Consumption_Assumption',
            'unit_drop_penalty': 'Unit_Drop_Penalty'
        }

        self._unit_consumption_assumption = unit_consumption_assumption
        self._unit_drop_penalty = unit_drop_penalty

    @classmethod
    def from_dict(cls, dikt) -> 'EvMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ev_meta of this EvMeta.  # noqa: E501
        :rtype: EvMeta
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unit_consumption_assumption(self) -> float:
        """Gets the unit_consumption_assumption of this EvMeta.


        :return: The unit_consumption_assumption of this EvMeta.
        :rtype: float
        """
        return self._unit_consumption_assumption

    @unit_consumption_assumption.setter
    def unit_consumption_assumption(self, unit_consumption_assumption: float):
        """Sets the unit_consumption_assumption of this EvMeta.


        :param unit_consumption_assumption: The unit_consumption_assumption of this EvMeta.
        :type unit_consumption_assumption: float
        """

        self._unit_consumption_assumption = unit_consumption_assumption

    @property
    def unit_drop_penalty(self) -> float:
        """Gets the unit_drop_penalty of this EvMeta.


        :return: The unit_drop_penalty of this EvMeta.
        :rtype: float
        """
        return self._unit_drop_penalty

    @unit_drop_penalty.setter
    def unit_drop_penalty(self, unit_drop_penalty: float):
        """Sets the unit_drop_penalty of this EvMeta.


        :param unit_drop_penalty: The unit_drop_penalty of this EvMeta.
        :type unit_drop_penalty: float
        """

        self._unit_drop_penalty = unit_drop_penalty
