# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mqtt import MQTT  # noqa: F401,E501
from swagger_server import util


class SourceESS(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mqtt: MQTT=None, value_percent: int=None):  # noqa: E501
        """SourceESS - a model defined in Swagger

        :param mqtt: The mqtt of this SourceESS.  # noqa: E501
        :type mqtt: MQTT
        :param value_percent: The value_percent of this SourceESS.  # noqa: E501
        :type value_percent: int
        """
        self.swagger_types = {
            'mqtt': MQTT,
            'value_percent': int
        }

        self.attribute_map = {
            'mqtt': 'mqtt',
            'value_percent': 'value_percent'
        }

        self._mqtt = mqtt
        self._value_percent = value_percent

    @classmethod
    def from_dict(cls, dikt) -> 'SourceESS':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SourceESS of this SourceESS.  # noqa: E501
        :rtype: SourceESS
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mqtt(self) -> MQTT:
        """Gets the mqtt of this SourceESS.


        :return: The mqtt of this SourceESS.
        :rtype: MQTT
        """
        return self._mqtt

    @mqtt.setter
    def mqtt(self, mqtt: MQTT):
        """Sets the mqtt of this SourceESS.


        :param mqtt: The mqtt of this SourceESS.
        :type mqtt: MQTT
        """

        self._mqtt = mqtt

    @property
    def value_percent(self) -> int:
        """Gets the value_percent of this SourceESS.


        :return: The value_percent of this SourceESS.
        :rtype: int
        """
        return self._value_percent

    @value_percent.setter
    def value_percent(self, value_percent: int):
        """Sets the value_percent of this SourceESS.


        :param value_percent: The value_percent of this SourceESS.
        :type value_percent: int
        """
        if value_percent is not None and value_percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `value_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if value_percent is not None and value_percent < 0:  # noqa: E501
            raise ValueError("Invalid value for `value_percent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value_percent = value_percent
