# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.e import E  # noqa: F401,E501
from swagger_server import util


class Dataset(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, bn: str=None, bt: int=None, bu: str=None, ver: int=None, e: E=None):  # noqa: E501
        """Dataset - a model defined in Swagger

        :param bn: The bn of this Dataset.  # noqa: E501
        :type bn: str
        :param bt: The bt of this Dataset.  # noqa: E501
        :type bt: int
        :param bu: The bu of this Dataset.  # noqa: E501
        :type bu: str
        :param ver: The ver of this Dataset.  # noqa: E501
        :type ver: int
        :param e: The e of this Dataset.  # noqa: E501
        :type e: E
        """
        self.swagger_types = {
            'bn': str,
            'bt': int,
            'bu': str,
            'ver': int,
            'e': E
        }

        self.attribute_map = {
            'bn': 'bn',
            'bt': 'bt',
            'bu': 'bu',
            'ver': 'ver',
            'e': 'e'
        }

        self._bn = bn
        self._bt = bt
        self._bu = bu
        self._ver = ver
        self._e = e

    @classmethod
    def from_dict(cls, dikt) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dataset of this Dataset.  # noqa: E501
        :rtype: Dataset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bn(self) -> str:
        """Gets the bn of this Dataset.


        :return: The bn of this Dataset.
        :rtype: str
        """
        return self._bn

    @bn.setter
    def bn(self, bn: str):
        """Sets the bn of this Dataset.


        :param bn: The bn of this Dataset.
        :type bn: str
        """

        self._bn = bn

    @property
    def bt(self) -> int:
        """Gets the bt of this Dataset.


        :return: The bt of this Dataset.
        :rtype: int
        """
        return self._bt

    @bt.setter
    def bt(self, bt: int):
        """Sets the bt of this Dataset.


        :param bt: The bt of this Dataset.
        :type bt: int
        """

        self._bt = bt

    @property
    def bu(self) -> str:
        """Gets the bu of this Dataset.


        :return: The bu of this Dataset.
        :rtype: str
        """
        return self._bu

    @bu.setter
    def bu(self, bu: str):
        """Sets the bu of this Dataset.


        :param bu: The bu of this Dataset.
        :type bu: str
        """

        self._bu = bu

    @property
    def ver(self) -> int:
        """Gets the ver of this Dataset.


        :return: The ver of this Dataset.
        :rtype: int
        """
        return self._ver

    @ver.setter
    def ver(self, ver: int):
        """Sets the ver of this Dataset.


        :param ver: The ver of this Dataset.
        :type ver: int
        """

        self._ver = ver

    @property
    def e(self) -> E:
        """Gets the e of this Dataset.


        :return: The e of this Dataset.
        :rtype: E
        """
        return self._e

    @e.setter
    def e(self, e: E):
        """Sets the e of this Dataset.


        :param e: The e of this Dataset.
        :type e: E
        """

        self._e = e
