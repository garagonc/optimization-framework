# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.source import Source  # noqa: F401,E501
from swagger_server import util


class GlobalControl(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, file: bool=None, ess_control: Source=None):  # noqa: E501
        """GlobalControl - a model defined in Swagger

        :param file: The file of this GlobalControl.  # noqa: E501
        :type file: bool
        :param ess_control: The ess_control of this GlobalControl.  # noqa: E501
        :type ess_control: Source
        """
        self.swagger_types = {
            'file': bool,
            'ess_control': Source
        }

        self.attribute_map = {
            'file': 'file',
            'ess_control': 'ESS_Control'
        }

        self._file = file
        self._ess_control = ess_control

    @classmethod
    def from_dict(cls, dikt) -> 'GlobalControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Global_Control of this GlobalControl.  # noqa: E501
        :rtype: GlobalControl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self) -> bool:
        """Gets the file of this GlobalControl.

        True for inserting data as plain text  # noqa: E501

        :return: The file of this GlobalControl.
        :rtype: bool
        """
        return self._file

    @file.setter
    def file(self, file: bool):
        """Sets the file of this GlobalControl.

        True for inserting data as plain text  # noqa: E501

        :param file: The file of this GlobalControl.
        :type file: bool
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def ess_control(self) -> Source:
        """Gets the ess_control of this GlobalControl.


        :return: The ess_control of this GlobalControl.
        :rtype: Source
        """
        return self._ess_control

    @ess_control.setter
    def ess_control(self, ess_control: Source):
        """Sets the ess_control of this GlobalControl.


        :param ess_control: The ess_control of this GlobalControl.
        :type ess_control: Source
        """

        self._ess_control = ess_control
