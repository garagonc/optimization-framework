# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ess import ESS  # noqa: F401,E501
from swagger_server.models.generic import Generic  # noqa: F401,E501
from swagger_server.models.global_control import GlobalControl  # noqa: F401,E501
from swagger_server.models.grid import Grid  # noqa: F401,E501
from swagger_server.models.load import Load  # noqa: F401,E501
from swagger_server.models.pv import PV  # noqa: F401,E501
from swagger_server import util


class InputSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, load: Load=None, photovoltaic: PV=None, ess: ESS=None, grid: Grid=None, global_control: GlobalControl=None, generic: Generic=None):  # noqa: E501
        """InputSource - a model defined in Swagger

        :param load: The load of this InputSource.  # noqa: E501
        :type load: Load
        :param photovoltaic: The photovoltaic of this InputSource.  # noqa: E501
        :type photovoltaic: PV
        :param ess: The ess of this InputSource.  # noqa: E501
        :type ess: ESS
        :param grid: The grid of this InputSource.  # noqa: E501
        :type grid: Grid
        :param global_control: The global_control of this InputSource.  # noqa: E501
        :type global_control: GlobalControl
        :param generic: The generic of this InputSource.  # noqa: E501
        :type generic: Generic
        """
        self.swagger_types = {
            'load': Load,
            'photovoltaic': PV,
            'ess': ESS,
            'grid': Grid,
            'global_control': GlobalControl,
            'generic': Generic
        }

        self.attribute_map = {
            'load': 'load',
            'photovoltaic': 'photovoltaic',
            'ess': 'ESS',
            'grid': 'grid',
            'global_control': 'global_control',
            'generic': 'generic'
        }

        self._load = load
        self._photovoltaic = photovoltaic
        self._ess = ess
        self._grid = grid
        self._global_control = global_control
        self._generic = generic

    @classmethod
    def from_dict(cls, dikt) -> 'InputSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InputSource of this InputSource.  # noqa: E501
        :rtype: InputSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load(self) -> Load:
        """Gets the load of this InputSource.


        :return: The load of this InputSource.
        :rtype: Load
        """
        return self._load

    @load.setter
    def load(self, load: Load):
        """Sets the load of this InputSource.


        :param load: The load of this InputSource.
        :type load: Load
        """

        self._load = load

    @property
    def photovoltaic(self) -> PV:
        """Gets the photovoltaic of this InputSource.


        :return: The photovoltaic of this InputSource.
        :rtype: PV
        """
        return self._photovoltaic

    @photovoltaic.setter
    def photovoltaic(self, photovoltaic: PV):
        """Sets the photovoltaic of this InputSource.


        :param photovoltaic: The photovoltaic of this InputSource.
        :type photovoltaic: PV
        """

        self._photovoltaic = photovoltaic

    @property
    def ess(self) -> ESS:
        """Gets the ess of this InputSource.


        :return: The ess of this InputSource.
        :rtype: ESS
        """
        return self._ess

    @ess.setter
    def ess(self, ess: ESS):
        """Sets the ess of this InputSource.


        :param ess: The ess of this InputSource.
        :type ess: ESS
        """

        self._ess = ess

    @property
    def grid(self) -> Grid:
        """Gets the grid of this InputSource.


        :return: The grid of this InputSource.
        :rtype: Grid
        """
        return self._grid

    @grid.setter
    def grid(self, grid: Grid):
        """Sets the grid of this InputSource.


        :param grid: The grid of this InputSource.
        :type grid: Grid
        """

        self._grid = grid

    @property
    def global_control(self) -> GlobalControl:
        """Gets the global_control of this InputSource.


        :return: The global_control of this InputSource.
        :rtype: GlobalControl
        """
        return self._global_control

    @global_control.setter
    def global_control(self, global_control: GlobalControl):
        """Sets the global_control of this InputSource.


        :param global_control: The global_control of this InputSource.
        :type global_control: GlobalControl
        """

        self._global_control = global_control

    @property
    def generic(self) -> Generic:
        """Gets the generic of this InputSource.


        :return: The generic of this InputSource.
        :rtype: Generic
        """
        return self._generic

    @generic.setter
    def generic(self, generic: Generic):
        """Sets the generic of this InputSource.


        :param generic: The generic of this InputSource.
        :type generic: Generic
        """

        self._generic = generic
