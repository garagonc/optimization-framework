# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mqtt import MQTT  # noqa: F401,E501
from swagger_server import util


class Source(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mqtt: MQTT=None, predict: bool=None, preprocess: bool=None, event: bool=None, sampling: bool=None):  # noqa: E501
        """Source - a model defined in Swagger

        :param mqtt: The mqtt of this Source.  # noqa: E501
        :type mqtt: MQTT
        :param predict: The predict of this Source.  # noqa: E501
        :type predict: bool
        :param preprocess: The preprocess of this Source.  # noqa: E501
        :type preprocess: bool
        :param event: The event of this Source.  # noqa: E501
        :type event: bool
        :param sampling: The sampling of this Source.  # noqa: E501
        :type sampling: bool
        """
        self.swagger_types = {
            'mqtt': MQTT,
            'predict': bool,
            'preprocess': bool,
            'event': bool,
            'sampling': bool
        }

        self.attribute_map = {
            'mqtt': 'mqtt',
            'predict': 'predict',
            'preprocess': 'preprocess',
            'event': 'event',
            'sampling': 'sampling'
        }

        self._mqtt = mqtt
        self._predict = predict
        self._preprocess = preprocess
        self._event = event
        self._sampling = sampling

    @classmethod
    def from_dict(cls, dikt) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Source of this Source.  # noqa: E501
        :rtype: Source
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mqtt(self) -> MQTT:
        """Gets the mqtt of this Source.


        :return: The mqtt of this Source.
        :rtype: MQTT
        """
        return self._mqtt

    @mqtt.setter
    def mqtt(self, mqtt: MQTT):
        """Sets the mqtt of this Source.


        :param mqtt: The mqtt of this Source.
        :type mqtt: MQTT
        """

        self._mqtt = mqtt

    @property
    def predict(self) -> bool:
        """Gets the predict of this Source.


        :return: The predict of this Source.
        :rtype: bool
        """
        return self._predict

    @predict.setter
    def predict(self, predict: bool):
        """Sets the predict of this Source.


        :param predict: The predict of this Source.
        :type predict: bool
        """

        self._predict = predict

    @property
    def preprocess(self) -> bool:
        """Gets the preprocess of this Source.


        :return: The preprocess of this Source.
        :rtype: bool
        """
        return self._preprocess

    @preprocess.setter
    def preprocess(self, preprocess: bool):
        """Sets the preprocess of this Source.


        :param preprocess: The preprocess of this Source.
        :type preprocess: bool
        """

        self._preprocess = preprocess

    @property
    def event(self) -> bool:
        """Gets the event of this Source.


        :return: The event of this Source.
        :rtype: bool
        """
        return self._event

    @event.setter
    def event(self, event: bool):
        """Sets the event of this Source.


        :param event: The event of this Source.
        :type event: bool
        """

        self._event = event

    @property
    def sampling(self) -> bool:
        """Gets the sampling of this Source.


        :return: The sampling of this Source.
        :rtype: bool
        """
        return self._sampling

    @sampling.setter
    def sampling(self, sampling: bool):
        """Sets the sampling of this Source.


        :param sampling: The sampling of this Source.
        :type sampling: bool
        """

        self._sampling = sampling
