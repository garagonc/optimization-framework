# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Start(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, repetition: int=None, time_step: int=None, horizon: int=None, model_name: str=None):  # noqa: E501
        """Start - a model defined in Swagger

        :param repetition: The repetition of this Start.  # noqa: E501
        :type repetition: int
        :param time_step: The time_step of this Start.  # noqa: E501
        :type time_step: int
        :param horizon: The horizon of this Start.  # noqa: E501
        :type horizon: int
        :param model_name: The model_name of this Start.  # noqa: E501
        :type model_name: str
        """
        self.swagger_types = {
            'repetition': int,
            'time_step': int,
            'horizon': int,
            'model_name': str
        }

        self.attribute_map = {
            'repetition': 'repetition',
            'time_step': 'time_step',
            'horizon': 'horizon',
            'model_name': 'model_name'
        }

        self._repetition = repetition
        self._time_step = time_step
        self._horizon = horizon
        self._model_name = model_name

    @classmethod
    def from_dict(cls, dikt) -> 'Start':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Start of this Start.  # noqa: E501
        :rtype: Start
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repetition(self) -> int:
        """Gets the repetition of this Start.


        :return: The repetition of this Start.
        :rtype: int
        """
        return self._repetition

    @repetition.setter
    def repetition(self, repetition: int):
        """Sets the repetition of this Start.


        :param repetition: The repetition of this Start.
        :type repetition: int
        """
        if repetition is None:
            raise ValueError("Invalid value for `repetition`, must not be `None`")  # noqa: E501

        self._repetition = repetition

    @property
    def time_step(self) -> int:
        """Gets the time_step of this Start.


        :return: The time_step of this Start.
        :rtype: int
        """
        return self._time_step

    @time_step.setter
    def time_step(self, time_step: int):
        """Sets the time_step of this Start.


        :param time_step: The time_step of this Start.
        :type time_step: int
        """
        if time_step is None:
            raise ValueError("Invalid value for `time_step`, must not be `None`")  # noqa: E501

        self._time_step = time_step

    @property
    def horizon(self) -> int:
        """Gets the horizon of this Start.


        :return: The horizon of this Start.
        :rtype: int
        """
        return self._horizon

    @horizon.setter
    def horizon(self, horizon: int):
        """Sets the horizon of this Start.


        :param horizon: The horizon of this Start.
        :type horizon: int
        """
        if horizon is None:
            raise ValueError("Invalid value for `horizon`, must not be `None`")  # noqa: E501

        self._horizon = horizon

    @property
    def model_name(self) -> str:
        """Gets the model_name of this Start.


        :return: The model_name of this Start.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this Start.


        :param model_name: The model_name of this Start.
        :type model_name: str
        """

        self._model_name = model_name
