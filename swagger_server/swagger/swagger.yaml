---
swagger: "2.0"
info:
  version: "0.0.2"
  title: "Optimization framework service"
  license:
    name: "Apache"
host: "localhost:8080"
basePath: "/v1"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /models:
    get:
      tags:
      - "models"
      summary: "Fetches all installed models in the framework"
      description: ""
      operationId: "get_models_in"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Model_answer"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
  /models/{name}:
    put:
      tags:
      - "models"
      summary: "Mathematical model for the optimization solver"
      description: ""
      operationId: "optimization_model"
      consumes:
      - "text/plain"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the loaded model"
        required: true
        type: "string"
      - in: "body"
        name: "upModel"
        description: "Mathematical model that needs to be added to the optimization\
          \ framework"
        required: true
        schema:
          $ref: "#/definitions/Model"
      responses:
        200:
          description: "OK"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
    delete:
      tags:
      - "models"
      summary: "Deletes the desired model of the framework"
      description: ""
      operationId: "delete_models"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the model to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.models_controller"
  /inputs/mqtt:
    post:
      tags:
      - "inputs"
      summary: "Creates a new mqtt data source as input"
      description: ""
      operationId: "mqtt_input_source"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "MQTT_Input_Source"
        description: "Data source to be created"
        required: true
        schema:
          $ref: "#/definitions/MQTTInputSource"
      responses:
        201:
          description: "Created succesfully"
          headers:
            Location:
              type: "string"
              description: "Id referencing the created instance."
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
  /inputs/mqtt/{id}:
    get:
      tags:
      - "inputs"
      summary: "Receives data from the framework"
      description: ""
      operationId: "get_mqtt_data_source_values"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the data source"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/MQTTInputSource"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
    put:
      tags:
      - "inputs"
      summary: "Submits data to the framework"
      description: ""
      operationId: "mqtt_input_put"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the data source"
        required: true
        type: "string"
      - in: "body"
        name: "dataset"
        description: "Dataset submitted to the framework"
        required: true
        schema:
          $ref: "#/definitions/MQTTInputSource"
      responses:
        200:
          description: "Created succesfully"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
    delete:
      tags:
      - "inputs"
      summary: "Deletes the loaded data"
      description: ""
      operationId: "delete_mqtt_registry"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the registry to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
  /inputs/dataset:
    post:
      tags:
      - "inputs"
      summary: "Creates a new data source as input"
      description: ""
      operationId: "dataset_input_source"
      consumes:
      - "application/json"
      - "text/plain"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "File_Input_Source"
        description: "Dataset submitted to the framework"
        required: true
        schema:
          $ref: "#/definitions/FileInputSource"
      responses:
        201:
          description: "Created succesfully"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
  /inputs/dataset/{id}:
    get:
      tags:
      - "inputs"
      summary: "Receives data from the framework"
      description: ""
      operationId: "get_data_source_values"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the data source"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/FileInputSource"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
    put:
      tags:
      - "inputs"
      summary: "Submits data to the framework"
      description: ""
      operationId: "dataset_input_put"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the data source"
        required: true
        type: "string"
      - in: "body"
        name: "dataset"
        description: "Dataset submitted to the framework"
        required: true
        schema:
          $ref: "#/definitions/FileInputSource"
      responses:
        200:
          description: "Created succesfully"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
    delete:
      tags:
      - "inputs"
      summary: "Deletes the loaded data"
      description: ""
      operationId: "delete_dataset_registry"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the registry to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
  /inputs/{id}:
    delete:
      tags:
      - "inputs"
      summary: "Deletes loaded data by id"
      description: ""
      operationId: "delete_data_source_all"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the data source to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.inputs_controller"
  /outputs/mqtt/{id}:
    get:
      tags:
      - "outputs"
      summary: "Get mqtt output details"
      description: ""
      operationId: "get_output_source_mqtt"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the output data source to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/OutputSource"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.outputs_controller"
    put:
      tags:
      - "outputs"
      summary: "Creates a new outputs setpoint as ouput"
      description: ""
      operationId: "output_source_mqtt"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the data source to be actualized"
        required: true
        type: "string"
      - in: "body"
        name: "Output_Source"
        description: "Output data source to be created"
        required: true
        schema:
          $ref: "#/definitions/OutputSource"
      responses:
        200:
          description: "Created succesfully"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.outputs_controller"
    delete:
      tags:
      - "outputs"
      summary: "Deletes the registration output of the framework"
      description: ""
      operationId: "delete_mqtt_output"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the registry to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.outputs_controller"
  /outputs/{id}:
    get:
      tags:
      - "outputs"
      summary: "Get ouput of the optimization"
      description: ""
      operationId: "get_output"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the registry to be actualized"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/OptimizationOutput"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.outputs_controller"
    delete:
      tags:
      - "outputs"
      summary: "Deletes the output of the framework"
      description: ""
      operationId: "delete_output"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Name of the registry to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
        500:
          description: "Internal server error"
      x-swagger-router-controller: "swagger_server.controllers.outputs_controller"
  /optimization/start/{id}:
    put:
      tags:
      - "optimization"
      summary: "Command for starting the framework"
      description: ""
      operationId: "framework_start"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the registry to be started"
        required: true
        type: "string"
      - in: "body"
        name: "startOFW"
        description: "Start command for the optimization framework \n repetitions:\
          \ -1 infinite repetitions"
        required: true
        schema:
          $ref: "#/definitions/Start"
      responses:
        200:
          description: "OK"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.optimization_controller"
  /optimization/stop/{id}:
    put:
      tags:
      - "optimization"
      summary: "Command for stoping the framework"
      description: ""
      operationId: "framework_stop"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the registry to be stopped"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.optimization_controller"
  /optimization/status/:
    get:
      tags:
      - "optimization"
      summary: "Command for getting status of the framework"
      description: ""
      operationId: "framework_status"
      consumes:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/StatusOutput"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "swagger_server.controllers.optimization_controller"
definitions:
  Start:
    type: "object"
    required:
    - "control_frequency"
    - "dT_in_seconds"
    - "horizon_in_steps"
    - "repetition"
    properties:
      repetition:
        type: "integer"
        format: "int32"
      control_frequency:
        type: "integer"
        format: "int32"
      horizon_in_steps:
        type: "integer"
        format: "int32"
      model_name:
        type: "string"
      solver:
        type: "string"
      dT_in_seconds:
        type: "integer"
        format: "int32"
    example:
      control_frequency: 60
      horizon_in_steps: 24
      dT_in_seconds: 3600
      model_name: "model_name"
      repetition: 2
      solver: "ipopt"
  Path_Definition:
    type: "object"
    required:
    - "path"
    properties:
      path:
        type: "string"
        description: "Path where the results will be stored"
  Load:
    type: "object"
    properties:
      P_Load:
        $ref: "#/definitions/Source"
      P_Load_R:
        $ref: "#/definitions/Source"
      P_Load_S:
        $ref: "#/definitions/Source"
      P_Load_T:
        $ref: "#/definitions/Source"
      Q_Load:
        $ref: "#/definitions/Source"
      Q_Load_R:
        $ref: "#/definitions/Source"
      Q_Load_S:
        $ref: "#/definitions/Source"
      Q_Load_T:
        $ref: "#/definitions/Source"
      meta:
        $ref: "#/definitions/metaLoad"
    example:
      P_Load_R:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Load_T:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_Load_S:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Load_S:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_Load_T:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Load:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      meta:
        pf_Load: 0.9
      P_Load:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Load_R:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
  metaLoad:
    type: "object"
    properties:
      pf_Load:
        type: "number"
        format: "float"
        minimum: 0
        maximum: 1
    example:
      pf_Load: 0.9
  PV:
    type: "object"
    properties:
      P_PV:
        $ref: "#/definitions/Source"
      P_PV_R:
        $ref: "#/definitions/Source"
      P_PV_S:
        $ref: "#/definitions/Source"
      P_PV_T:
        $ref: "#/definitions/Source"
      Q_PV:
        $ref: "#/definitions/Source"
      Q_PV_R:
        $ref: "#/definitions/Source"
      Q_PV_S:
        $ref: "#/definitions/Source"
      Q_PV_T:
        $ref: "#/definitions/Source"
      meta:
        $ref: "#/definitions/metaPV"
    description: "Definition of a PV element as input for the optimizer"
    example:
      P_PV:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_PV_S:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_PV_T:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_PV:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      meta:
        PV_Inv_Max_Power: 1300
        City: "Bonn"
        Country: "Germany"
      P_PV_R:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_PV_S:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_PV_T:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_PV_R:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
  PV_Output:
    type: "object"
    properties:
      P_PV_Output:
        $ref: "#/definitions/Source"
      P_PV_R_Output:
        $ref: "#/definitions/Source"
      P_PV_S_Output:
        $ref: "#/definitions/Source"
      P_PV_T_Output:
        $ref: "#/definitions/Source"
      Q_PV_Output:
        $ref: "#/definitions/Source"
      Q_PV_R_Output:
        $ref: "#/definitions/Source"
      Q_PV_S_Output:
        $ref: "#/definitions/Source"
      Q_PV_T_Output:
        $ref: "#/definitions/Source"
    example:
      Q_PV_T_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_PV_R_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_PV_T_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_PV_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_PV_S_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_PV_R_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_PV_S_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_PV_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
  metaPV:
    type: "object"
    properties:
      PV_Inv_Max_Power:
        type: "integer"
        format: "int32"
      City:
        type: "string"
      Country:
        type: "string"
    example:
      PV_Inv_Max_Power: 1300
      City: "Bonn"
      Country: "Germany"
  ESS:
    type: "object"
    required:
    - "SoC_Value"
    properties:
      SoC_Value:
        $ref: "#/definitions/SourceESS"
      meta:
        $ref: "#/definitions/metaESS"
    example:
      SoC_Value:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
      meta:
        ESS_Max_Discharge_Power: 2500
        ESS_Max_SoC: 0.9
        ESS_Charging_Eff: 0.9
        ESS_Min_SoC: 0.2
        ESS_Max_Charge_Power: 2500
        ESS_Discharging_Eff: 0.85
        ESS_Capacity: 3560
  ESS_Output:
    type: "object"
    required:
    - "P_ESS_Output"
    properties:
      P_ESS_Output:
        description: "Setting power of the ESS"
        $ref: "#/definitions/Source"
    example:
      P_ESS_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
  metaESS:
    type: "object"
    properties:
      ESS_Min_SoC:
        type: "number"
        format: "float"
        minimum: 0
        maximum: 1
      ESS_Max_SoC:
        type: "number"
        format: "float"
        minimum: 0
        maximum: 1
      ESS_Capacity:
        type: "number"
        format: "float"
      ESS_Max_Charge_Power:
        type: "number"
        format: "float"
      ESS_Max_Discharge_Power:
        type: "number"
        format: "float"
      ESS_Charging_Eff:
        type: "number"
        format: "float"
        minimum: 0
        maximum: 1
      ESS_Discharging_Eff:
        type: "number"
        format: "float"
        minimum: 0
        maximum: 1
    example:
      ESS_Max_Discharge_Power: 2500
      ESS_Max_SoC: 0.9
      ESS_Charging_Eff: 0.9
      ESS_Min_SoC: 0.2
      ESS_Max_Charge_Power: 2500
      ESS_Discharging_Eff: 0.85
      ESS_Capacity: 3560
  grid:
    type: "object"
    properties:
      meta:
        $ref: "#/definitions/metaGrid"
    example:
      meta:
        Q_Grid_Max_Export_Power: 750
        Min_Voltage_Drop: 5
        P_Grid_Max_Export_Power: 1550
        Max_Voltage_Drop: 10
  grid_Output:
    type: "object"
    properties:
      P_Grid_Output:
        $ref: "#/definitions/Source"
      P_Grid_R_Output:
        $ref: "#/definitions/Source"
      P_Grid_S_Output:
        $ref: "#/definitions/Source"
      P_Grid_T_Output:
        $ref: "#/definitions/Source"
      Q_Grid_Output:
        $ref: "#/definitions/Source"
      Q_Grid_R_Output:
        $ref: "#/definitions/Source"
      Q_Grid_S_Output:
        $ref: "#/definitions/Source"
      Q_Grid_T_Output:
        $ref: "#/definitions/Source"
    example:
      P_Grid_R_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_Grid_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_Grid_T_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      P_Grid_S_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Grid_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Grid_R_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Grid_S_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
      Q_Grid_T_Output:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
  metaGrid:
    type: "object"
    properties:
      P_Grid_Max_Export_Power:
        type: "integer"
        format: "int32"
      Q_Grid_Max_Export_Power:
        type: "integer"
        format: "int32"
      Max_Voltage_Drop:
        type: "number"
        format: "float"
        minimum: 0
        maximum: 100
      Min_Voltage_Drop:
        type: "number"
        format: "float"
        minimum: 0
        maximum: 100
    example:
      Q_Grid_Max_Export_Power: 750
      Min_Voltage_Drop: 5
      P_Grid_Max_Export_Power: 1550
      Max_Voltage_Drop: 10
  Source:
    type: "object"
    properties:
      mqtt:
        $ref: "#/definitions/MQTT"
      predict:
        type: "boolean"
    description: "Selection between MQTT or file mode inputs or outputs"
    example:
      mqtt:
        qos: 1
        host: "hostname"
        topic: "topic_name"
        port: 1883
        username: "myuser"
        password: "mypass"
        ca_cert_path: "path to cert"
        insecure: false
      predict: true
  SourceESS:
    type: "object"
    properties:
      mqtt:
        $ref: "#/definitions/MQTT"
    example:
      mqtt:
        qos: 1
        host: "hostname"
        topic: "topic_name"
        port: 1883
        username: "myuser"
        password: "mypass"
        ca_cert_path: "path to cert"
        insecure: false
  MQTT:
    type: "object"
    required:
    - "host"
    - "topic"
    properties:
      host:
        type: "string"
      topic:
        type: "string"
      qos:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 2
      port:
        type: "integer"
        format: "int32"
        minimum: 0
      username:
        type: "string"
      password:
        type: "string"
      ca_cert_path:
        type: "string"
      insecure:
        type: "boolean"
    example:
      qos: 1
      host: "hostname"
      topic: "topic_name"
      port: 1883
      username: "myuser"
      password: "mypass"
      ca_cert_path: "path to cert"
      insecure: false
  dataset:
    type: "object"
    properties:
      bn:
        type: "string"
      bt:
        type: "integer"
        format: "int64"
      bu:
        type: "string"
      ver:
        type: "integer"
        format: "int64"
      e:
        $ref: "#/definitions/e"
  e:
    type: "object"
    properties:
      t:
        type: "integer"
        format: "int64"
      n:
        type: "string"
      u:
        type: "string"
      v:
        type: "integer"
        format: "int64"
      sv:
        type: "string"
      bv:
        type: "boolean"
  Model:
    type: "object"
    xml:
      name: "Model"
  Model_url:
    type: "object"
    required:
    - "upModelUrl"
    properties:
      upModelUrl:
        type: "string"
    xml:
      name: "ModelUrl"
      wrapped: true
  MQTTInputSource:
    type: "object"
    properties:
      generic:
        $ref: "#/definitions/Generic"
      load:
        $ref: "#/definitions/Load"
      photovoltaic:
        $ref: "#/definitions/PV"
      ESS:
        $ref: "#/definitions/ESS"
      grid:
        $ref: "#/definitions/grid"
      global_control:
        $ref: "#/definitions/Global_Control"
    example:
      load:
        P_Load_R:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Load_T:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_Load_S:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Load_S:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_Load_T:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Load:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        meta:
          pf_Load: 0.9
        P_Load:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Load_R:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
      ESS:
        SoC_Value:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
        meta:
          ESS_Max_Discharge_Power: 2500
          ESS_Max_SoC: 0.9
          ESS_Charging_Eff: 0.9
          ESS_Min_SoC: 0.2
          ESS_Max_Charge_Power: 2500
          ESS_Discharging_Eff: 0.85
          ESS_Capacity: 3560
      grid:
        meta:
          Q_Grid_Max_Export_Power: 750
          Min_Voltage_Drop: 5
          P_Grid_Max_Export_Power: 1550
          Max_Voltage_Drop: 10
      photovoltaic:
        P_PV:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_PV_S:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_PV_T:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_PV:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        meta:
          PV_Inv_Max_Power: 1300
          City: "Bonn"
          Country: "Germany"
        P_PV_R:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_PV_S:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_PV_T:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_PV_R:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
      generic: ""
      global_control:
        ESS_Control:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
  FileInputSource:
    type: "object"
    properties:
      generic:
        $ref: "#/definitions/Generic_Files"
      load:
        $ref: "#/definitions/Load_File"
      photovoltaic:
        $ref: "#/definitions/PV_File"
      ESS:
        $ref: "#/definitions/ESS_File"
      grid:
        $ref: "#/definitions/grid"
      global_control:
        $ref: "#/definitions/Global_Control_File"
    example:
      load:
        P_Load_R:
        - 705.4
        - 305.6
        Q_Load_T:
        - 705.4
        - 305.6
        P_Load_S:
        - 705.4
        - 305.6
        Q_Load_S:
        - 705.4
        - 305.6
        P_Load_T:
        - 705.4
        - 305.6
        Q_Load:
        - 705.4
        - 305.6
        P_Load:
        - 705.4
        - 305.6
        Q_Load_R:
        - 705.4
        - 305.6
      ESS:
        SoC_Value: 41
        meta:
          ESS_Max_Discharge_Power: 2500
          ESS_Max_SoC: 90
          ESS_Charging_Eff: 0.9
          ESS_Min_SoC: 20
          ESS_Max_Charge_Power: 2500
          ESS_Discharging_Eff: 0.85
          ESS_Capacity: 3560
      grid:
        meta:
          Q_Grid_Max_Export_Power: 750
          Min_Voltage_Drop: 5
          P_Grid_Max_Export_Power: 1550
          Max_Voltage_Drop: 10
      photovoltaic:
        P_PV:
        - 705.4
        - 305.6
      generic: ""
      global_control:
        ESS_Control:
        - 1300.2
        - 1200.5
  OutputSource:
    type: "object"
    properties:
      photovoltaic:
        $ref: "#/definitions/PV_Output"
      ESS:
        $ref: "#/definitions/ESS_Output"
      grid:
        $ref: "#/definitions/grid_Output"
    example:
      ESS:
        P_ESS_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
      grid:
        P_Grid_R_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_Grid_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_Grid_T_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_Grid_S_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Grid_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Grid_R_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Grid_S_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_Grid_T_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
      photovoltaic:
        Q_PV_T_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_PV_R_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_PV_T_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_PV_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_PV_S_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_PV_R_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        Q_PV_S_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
        P_PV_Output:
          mqtt:
            qos: 1
            host: "hostname"
            topic: "topic_name"
            port: 1883
            username: "myuser"
            password: "mypass"
            ca_cert_path: "path to cert"
            insecure: false
          predict: true
  Model_answer:
    type: "object"
    properties:
      models:
        type: "array"
        items:
          $ref: "#/definitions/Model_Output"
    example:
      models:
      - name: "name"
        solver: "ipopt"
      - name: "name"
        solver: "ipopt"
  Model_Output:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      solver:
        type: "string"
    example:
      name: "name"
      solver: "ipopt"
  Global_Control:
    type: "object"
    required:
    - "ESS_Control"
    properties:
      ESS_Control:
        $ref: "#/definitions/Source"
    example:
      ESS_Control:
        mqtt:
          qos: 1
          host: "hostname"
          topic: "topic_name"
          port: 1883
          username: "myuser"
          password: "mypass"
          ca_cert_path: "path to cert"
          insecure: false
        predict: true
  Global_Control_File:
    type: "object"
    required:
    - "ESS_Control"
    properties:
      ESS_Control:
        type: "array"
        items:
          type: "number"
    example:
      ESS_Control:
      - 1300.2
      - 1200.5
  PV_File:
    type: "object"
    required:
    - "P_PV"
    properties:
      P_PV:
        type: "array"
        items:
          type: "number"
      meta:
        $ref: "#/definitions/metaPV"
    example:
      P_PV:
      - 705.4
      - 305.6
  Load_File:
    type: "object"
    properties:
      P_Load:
        type: "array"
        items:
          type: "number"
      P_Load_R:
        type: "array"
        items:
          type: "number"
      P_Load_S:
        type: "array"
        items:
          type: "number"
      P_Load_T:
        type: "array"
        items:
          type: "number"
      Q_Load:
        type: "array"
        items:
          type: "number"
      Q_Load_R:
        type: "array"
        items:
          type: "number"
      Q_Load_S:
        type: "array"
        items:
          type: "number"
      Q_Load_T:
        type: "array"
        items:
          type: "number"
      meta:
        $ref: "#/definitions/metaLoad"
    example:
      P_Load_R:
      - 705.4
      - 305.6
      Q_Load_T:
      - 705.4
      - 305.6
      P_Load_S:
      - 705.4
      - 305.6
      Q_Load_S:
      - 705.4
      - 305.6
      P_Load_T:
      - 705.4
      - 305.6
      Q_Load:
      - 705.4
      - 305.6
      P_Load:
      - 705.4
      - 305.6
      Q_Load_R:
      - 705.4
      - 305.6
  ESS_File:
    type: "object"
    required:
    - "SoC_Value"
    properties:
      SoC_Value:
        type: "number"
        minimum: 0
        maximum: 100
      meta:
        $ref: "#/definitions/metaESS"
    example:
      SoC_Value: 41
      meta:
        ESS_Max_Discharge_Power: 2500
        ESS_Max_SoC: 90
        ESS_Charging_Eff: 0.9
        ESS_Min_SoC: 20
        ESS_Max_Charge_Power: 2500
        ESS_Discharging_Eff: 0.85
        ESS_Capacity: 3560
  Generic:
    type: "array"
    items:
      $ref: "#/definitions/Generic_mqtt"
  Generic_mqtt:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name defining the parameter into the optimization model"
      generic_name:
        $ref: "#/definitions/Source"
  Generic_Files:
    type: "array"
    items:
      $ref: "#/definitions/Generic_File"
  Generic_File:
    type: "object"
    required:
    - "file"
    - "name"
    properties:
      name:
        type: "string"
        description: "Name defining the parameter into the optimization model"
      file:
        type: "array"
        items:
          type: "number"
    example:
      name: "MyCustomName"
      file:
      - 1400.4
      - 1500.3
  Status:
    type: "object"
    properties:
      repetition:
        type: "integer"
        format: "int32"
      control_frequency:
        type: "integer"
        format: "int32"
      horizon_in_steps:
        type: "integer"
        format: "int32"
      model_name:
        type: "string"
      solver:
        type: "string"
      dT_in_seconds:
        type: "integer"
        format: "int32"
      status:
        type: "string"
      start_time:
        type: "number"
        format: "float"
      id:
        type: "string"
    example:
      control_frequency: 30
      horizon_in_steps: 24
      dT_in_seconds: 3600
      model_name: "model_name"
      repetition: 0
      solver: "solver"
      status: "running"
      id: "asdfg1234"
      start_time: 1.5492829927812E9
  StatusOutput:
    type: "object"
    properties:
      status:
        type: "array"
        items:
          $ref: "#/definitions/Status"
    example:
      status:
      - control_frequency: 30
        horizon_in_steps: 24
        dT_in_seconds: 3600
        model_name: "model_name"
        repetition: 0
        solver: "solver"
        status: "running"
        id: "asdfg1234"
        start_time: 1.5492829927812E9
      - status: "stopped"
        id: "qwer56758"
  OptimizationOutput:
    type: "object"
    example:
      P_ESS_Output:
        1549296638:
          0: 0.0021808010500441975
          1: 0.0020899300491295783
          2: 0.00199905959594257
          3: 0.0019081896666691433
          4: 0.0018173202374902097
      P_Grid_Output:
        1549296638:
          0: 0.054819189123018454
          1: 0.08851006012393307
          2: 0.08860093057712008
          3: 0.06815846750639351
          4: 0.07571600293557243
    additionalProperties:
      type: "object"
      additionalProperties:
        type: "object"
        properties: {}
